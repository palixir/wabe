"""Phone custom scalar type"""
scalar Phone

enum RoleEnum {
  Admin
  Client
}

enum AuthenticationProvider {
  google
  emailPassword
}

enum SecondaryFactor {
  EmailOTP
}

enum PaymentMode {
  payment
  subscription
}

enum PaymentReccuringInterval {
  month
  year
}

enum Currency {
  eur
  usd
}

"""User class"""
type User {
  id: ID!
  name: String
  age: Int
  acl: UserACLObject
  createdAt: Date
  updatedAt: Date
  search: [String]
  authentication: UserAuthentication
  provider: AuthenticationProvider
  isOauth: Boolean
  email: Email
  verifiedEmail: Boolean
  role: Role
  sessions: _SessionConnection
}

type UserACLObject {
  users: [UserACLObjectUsersACL]
  roles: [UserACLObjectRolesACL]
}

type UserACLObjectUsersACL {
  userId: String!
  read: Boolean!
  write: Boolean!
}

type UserACLObjectRolesACL {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

"""Date scalar type"""
scalar Date

type UserAuthentication {
  emailPassword: UserAuthenticationEmailPassword
  google: UserAuthenticationGoogle
}

type UserAuthenticationEmailPassword {
  email: Email!
  password: String!
}

"""Email scalar type"""
scalar Email

type UserAuthenticationGoogle {
  email: Email!
  verifiedEmail: Boolean!
  idToken: String!
}

type _SessionConnection {
  totalCount: Int
  edges: [_SessionEdge]
}

type _SessionEdge {
  node: _Session!
}

"""User class"""
input UserInput {
  name: String
  age: Int
  acl: UserACLObjectInput
  createdAt: Date
  updatedAt: Date
  search: [String]
  authentication: UserAuthenticationInput
  provider: AuthenticationProvider
  isOauth: Boolean
  email: Email
  verifiedEmail: Boolean
  role: RolePointerInput
  sessions: _SessionRelationInput
}

input UserACLObjectInput {
  users: [UserACLObjectUsersACLInput]
  roles: [UserACLObjectRolesACLInput]
}

input UserACLObjectUsersACLInput {
  userId: String!
  read: Boolean!
  write: Boolean!
}

input UserACLObjectRolesACLInput {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

input UserAuthenticationInput {
  emailPassword: UserAuthenticationEmailPasswordInput
  google: UserAuthenticationGoogleInput
}

input UserAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
}

input UserAuthenticationGoogleInput {
  email: Email!
  verifiedEmail: Boolean!
  idToken: String!
}

"""Input to link an object to a pointer User"""
input UserPointerInput {
  unlink: Boolean
  link: ID
  createAndLink: UserCreateFieldsInput
}

"""User class"""
input UserCreateFieldsInput {
  name: String
  age: Int
  acl: UserACLObjectCreateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
  authentication: UserAuthenticationCreateFieldsInput
  provider: AuthenticationProvider
  isOauth: Boolean
  email: Email
  verifiedEmail: Boolean
  role: RolePointerInput
  sessions: _SessionRelationInput
}

input UserACLObjectCreateFieldsInput {
  users: [UserACLObjectUsersACLCreateFieldsInput]
  roles: [UserACLObjectRolesACLCreateFieldsInput]
}

input UserACLObjectUsersACLCreateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input UserACLObjectRolesACLCreateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input UserAuthenticationCreateFieldsInput {
  emailPassword: UserAuthenticationEmailPasswordCreateFieldsInput
  google: UserAuthenticationGoogleCreateFieldsInput
}

input UserAuthenticationEmailPasswordCreateFieldsInput {
  email: Email
  password: String
}

input UserAuthenticationGoogleCreateFieldsInput {
  email: Email
  verifiedEmail: Boolean
  idToken: String
}

"""Input to add a relation to the class User"""
input UserRelationInput {
  add: [ID!]
  remove: [ID!]
  createAndAdd: [UserCreateFieldsInput!]
}

type Post {
  id: ID!
  name: String!
  test: File
  acl: PostACLObject
  createdAt: Date
  updatedAt: Date
  search: [String]
}

"""File scalar type"""
scalar File

type PostACLObject {
  users: [PostACLObjectUsersACL]
  roles: [PostACLObjectRolesACL]
}

type PostACLObjectUsersACL {
  userId: String!
  read: Boolean!
  write: Boolean!
}

type PostACLObjectRolesACL {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

input PostInput {
  name: String!
  test: File
  acl: PostACLObjectInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PostACLObjectInput {
  users: [PostACLObjectUsersACLInput]
  roles: [PostACLObjectRolesACLInput]
}

input PostACLObjectUsersACLInput {
  userId: String!
  read: Boolean!
  write: Boolean!
}

input PostACLObjectRolesACLInput {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

"""Input to link an object to a pointer Post"""
input PostPointerInput {
  unlink: Boolean
  link: ID
  createAndLink: PostCreateFieldsInput
}

input PostCreateFieldsInput {
  name: String
  test: File
  acl: PostACLObjectCreateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PostACLObjectCreateFieldsInput {
  users: [PostACLObjectUsersACLCreateFieldsInput]
  roles: [PostACLObjectRolesACLCreateFieldsInput]
}

input PostACLObjectUsersACLCreateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input PostACLObjectRolesACLCreateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

"""Input to add a relation to the class Post"""
input PostRelationInput {
  add: [ID!]
  remove: [ID!]
  createAndAdd: [PostCreateFieldsInput!]
}

type _Session {
  id: ID!
  user: User
  accessToken: String!
  accessTokenExpiresAt: Date!
  refreshToken: String
  refreshTokenExpiresAt: Date!
  acl: _SessionACLObject
  createdAt: Date
  updatedAt: Date
  search: [String]
}

type _SessionACLObject {
  users: [_SessionACLObjectUsersACL]
  roles: [_SessionACLObjectRolesACL]
}

type _SessionACLObjectUsersACL {
  userId: String!
  read: Boolean!
  write: Boolean!
}

type _SessionACLObjectRolesACL {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

input _SessionInput {
  user: UserPointerInput
  accessToken: String!
  accessTokenExpiresAt: Date!
  refreshToken: String
  refreshTokenExpiresAt: Date!
  acl: _SessionACLObjectInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input _SessionACLObjectInput {
  users: [_SessionACLObjectUsersACLInput]
  roles: [_SessionACLObjectRolesACLInput]
}

input _SessionACLObjectUsersACLInput {
  userId: String!
  read: Boolean!
  write: Boolean!
}

input _SessionACLObjectRolesACLInput {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

"""Input to link an object to a pointer _Session"""
input _SessionPointerInput {
  unlink: Boolean
  link: ID
  createAndLink: _SessionCreateFieldsInput
}

input _SessionCreateFieldsInput {
  user: UserPointerInput
  accessToken: String
  accessTokenExpiresAt: Date
  refreshToken: String
  refreshTokenExpiresAt: Date
  acl: _SessionACLObjectCreateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input _SessionACLObjectCreateFieldsInput {
  users: [_SessionACLObjectUsersACLCreateFieldsInput]
  roles: [_SessionACLObjectRolesACLCreateFieldsInput]
}

input _SessionACLObjectUsersACLCreateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input _SessionACLObjectRolesACLCreateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

"""Input to add a relation to the class _Session"""
input _SessionRelationInput {
  add: [ID!]
  remove: [ID!]
  createAndAdd: [_SessionCreateFieldsInput!]
}

type Role {
  id: ID!
  name: String!
  users: UserConnection
  acl: RoleACLObject
  createdAt: Date
  updatedAt: Date
  search: [String]
}

type UserConnection {
  totalCount: Int
  edges: [UserEdge]
}

type UserEdge {
  node: User!
}

type RoleACLObject {
  users: [RoleACLObjectUsersACL]
  roles: [RoleACLObjectRolesACL]
}

type RoleACLObjectUsersACL {
  userId: String!
  read: Boolean!
  write: Boolean!
}

type RoleACLObjectRolesACL {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

input RoleInput {
  name: String!
  users: UserRelationInput
  acl: RoleACLObjectInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input RoleACLObjectInput {
  users: [RoleACLObjectUsersACLInput]
  roles: [RoleACLObjectRolesACLInput]
}

input RoleACLObjectUsersACLInput {
  userId: String!
  read: Boolean!
  write: Boolean!
}

input RoleACLObjectRolesACLInput {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

"""Input to link an object to a pointer Role"""
input RolePointerInput {
  unlink: Boolean
  link: ID
  createAndLink: RoleCreateFieldsInput
}

input RoleCreateFieldsInput {
  name: String
  users: UserRelationInput
  acl: RoleACLObjectCreateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input RoleACLObjectCreateFieldsInput {
  users: [RoleACLObjectUsersACLCreateFieldsInput]
  roles: [RoleACLObjectRolesACLCreateFieldsInput]
}

input RoleACLObjectUsersACLCreateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input RoleACLObjectRolesACLCreateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

"""Input to add a relation to the class Role"""
input RoleRelationInput {
  add: [ID!]
  remove: [ID!]
  createAndAdd: [RoleCreateFieldsInput!]
}

type Payment {
  id: ID!
  user: User
  amount: Int!
  currency: Currency!
  acl: PaymentACLObject
  createdAt: Date
  updatedAt: Date
  search: [String]
}

type PaymentACLObject {
  users: [PaymentACLObjectUsersACL]
  roles: [PaymentACLObjectRolesACL]
}

type PaymentACLObjectUsersACL {
  userId: String!
  read: Boolean!
  write: Boolean!
}

type PaymentACLObjectRolesACL {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

input PaymentInput {
  user: UserPointerInput
  amount: Int!
  currency: Currency!
  acl: PaymentACLObjectInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PaymentACLObjectInput {
  users: [PaymentACLObjectUsersACLInput]
  roles: [PaymentACLObjectRolesACLInput]
}

input PaymentACLObjectUsersACLInput {
  userId: String!
  read: Boolean!
  write: Boolean!
}

input PaymentACLObjectRolesACLInput {
  roleId: String!
  read: Boolean!
  write: Boolean!
}

"""Input to link an object to a pointer Payment"""
input PaymentPointerInput {
  unlink: Boolean
  link: ID
  createAndLink: PaymentCreateFieldsInput
}

input PaymentCreateFieldsInput {
  user: UserPointerInput
  amount: Int
  currency: Currency
  acl: PaymentACLObjectCreateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PaymentACLObjectCreateFieldsInput {
  users: [PaymentACLObjectUsersACLCreateFieldsInput]
  roles: [PaymentACLObjectRolesACLCreateFieldsInput]
}

input PaymentACLObjectUsersACLCreateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input PaymentACLObjectRolesACLCreateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

"""Input to add a relation to the class Payment"""
input PaymentRelationInput {
  add: [ID!]
  remove: [ID!]
  createAndAdd: [PaymentCreateFieldsInput!]
}

type Query {
  """User class"""
  user(id: ID): User

  """User class"""
  users(where: UserWhereInput, offset: Int, first: Int, order: [UserOrder!]): UserConnection!
  post(id: ID): Post
  posts(where: PostWhereInput, offset: Int, first: Int, order: [PostOrder!]): PostConnection!
  _session(id: ID): _Session
  _sessions(where: _SessionWhereInput, offset: Int, first: Int, order: [_SessionOrder!]): _SessionConnection!
  role(id: ID): Role
  roles(where: RoleWhereInput, offset: Int, first: Int, order: [RoleOrder!]): RoleConnection!
  payment(id: ID): Payment
  payments(where: PaymentWhereInput, offset: Int, first: Int, order: [PaymentOrder!]): PaymentConnection!

  """Hello world description"""
  helloWorld(name: String!): String
  me: MeOutput

  """Get invoices of a customer"""
  getInvoices(email: Email!): [Invoice]!
}

"""User class"""
input UserWhereInput {
  id: IdWhereInput
  name: StringWhereInput
  age: IntWhereInput
  acl: UserACLObjectWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  search: SearchWhereInput
  authentication: UserAuthenticationWhereInput
  provider: AnyWhereInput
  isOauth: BooleanWhereInput
  email: EmailWhereInput
  verifiedEmail: BooleanWhereInput
  role: RoleWhereInput
  sessions: _SessionWhereInput
  OR: [UserWhereInput]
  AND: [UserWhereInput]
}

input IdWhereInput {
  equalTo: ID
  notEqualTo: ID
  in: [ID]
  notIn: [ID]
}

input StringWhereInput {
  equalTo: String
  notEqualTo: String
  in: [String]
  notIn: [String]
}

input IntWhereInput {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  in: [Int]
  notIn: [Int]
}

input UserACLObjectWhereInput {
  users: [UserACLObjectUsersACLWhereInput]
  roles: [UserACLObjectRolesACLWhereInput]
  OR: [UserACLObjectWhereInput]
  AND: [UserACLObjectWhereInput]
}

input UserACLObjectUsersACLWhereInput {
  userId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [UserACLObjectUsersACLWhereInput]
  AND: [UserACLObjectUsersACLWhereInput]
}

input BooleanWhereInput {
  equalTo: Boolean
  notEqualTo: Boolean
  in: [Boolean]
  notIn: [Boolean]
}

input UserACLObjectRolesACLWhereInput {
  roleId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [UserACLObjectRolesACLWhereInput]
  AND: [UserACLObjectRolesACLWhereInput]
}

input DateWhereInput {
  equalTo: Date
  notEqualTo: Date
  in: [Date]
  notIn: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  greaterThan: Date
  greaterThanOrEqualTo: Date
}

input SearchWhereInput {
  contains: Search
}

"""Search scalar to tokenize and search for all searchable fields"""
scalar Search

input UserAuthenticationWhereInput {
  emailPassword: UserAuthenticationEmailPasswordWhereInput
  google: UserAuthenticationGoogleWhereInput
  OR: [UserAuthenticationWhereInput]
  AND: [UserAuthenticationWhereInput]
}

input UserAuthenticationEmailPasswordWhereInput {
  email: EmailWhereInput
  password: StringWhereInput
  OR: [UserAuthenticationEmailPasswordWhereInput]
  AND: [UserAuthenticationEmailPasswordWhereInput]
}

input EmailWhereInput {
  equalTo: Email
  notEqualTo: Email
  in: [Email]
  notIn: [Email]
}

input UserAuthenticationGoogleWhereInput {
  email: EmailWhereInput
  verifiedEmail: BooleanWhereInput
  idToken: StringWhereInput
  OR: [UserAuthenticationGoogleWhereInput]
  AND: [UserAuthenticationGoogleWhereInput]
}

input AnyWhereInput {
  equalTo: Any
  notEqualTo: Any
}

"""
The Any scalar type is used in operations and types that involve any type of value.
"""
scalar Any

input RoleWhereInput {
  id: IdWhereInput
  name: StringWhereInput
  users: UserWhereInput
  acl: RoleACLObjectWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  search: SearchWhereInput
  OR: [RoleWhereInput]
  AND: [RoleWhereInput]
}

input RoleACLObjectWhereInput {
  users: [RoleACLObjectUsersACLWhereInput]
  roles: [RoleACLObjectRolesACLWhereInput]
  OR: [RoleACLObjectWhereInput]
  AND: [RoleACLObjectWhereInput]
}

input RoleACLObjectUsersACLWhereInput {
  userId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [RoleACLObjectUsersACLWhereInput]
  AND: [RoleACLObjectUsersACLWhereInput]
}

input RoleACLObjectRolesACLWhereInput {
  roleId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [RoleACLObjectRolesACLWhereInput]
  AND: [RoleACLObjectRolesACLWhereInput]
}

input _SessionWhereInput {
  id: IdWhereInput
  user: UserWhereInput
  accessToken: StringWhereInput
  accessTokenExpiresAt: DateWhereInput
  refreshToken: StringWhereInput
  refreshTokenExpiresAt: DateWhereInput
  acl: _SessionACLObjectWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  search: SearchWhereInput
  OR: [_SessionWhereInput]
  AND: [_SessionWhereInput]
}

input _SessionACLObjectWhereInput {
  users: [_SessionACLObjectUsersACLWhereInput]
  roles: [_SessionACLObjectRolesACLWhereInput]
  OR: [_SessionACLObjectWhereInput]
  AND: [_SessionACLObjectWhereInput]
}

input _SessionACLObjectUsersACLWhereInput {
  userId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [_SessionACLObjectUsersACLWhereInput]
  AND: [_SessionACLObjectUsersACLWhereInput]
}

input _SessionACLObjectRolesACLWhereInput {
  roleId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [_SessionACLObjectRolesACLWhereInput]
  AND: [_SessionACLObjectRolesACLWhereInput]
}

enum UserOrder {
  name_ASC
  name_DESC
  age_ASC
  age_DESC
  acl_ASC
  acl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  search_ASC
  search_DESC
  authentication_ASC
  authentication_DESC
  provider_ASC
  provider_DESC
  isOauth_ASC
  isOauth_DESC
  email_ASC
  email_DESC
  verifiedEmail_ASC
  verifiedEmail_DESC
  role_ASC
  role_DESC
  sessions_ASC
  sessions_DESC
}

type PostConnection {
  totalCount: Int
  edges: [PostEdge]
}

type PostEdge {
  node: Post!
}

input PostWhereInput {
  id: IdWhereInput
  name: StringWhereInput
  test: FileWhereInput
  acl: PostACLObjectWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  search: SearchWhereInput
  OR: [PostWhereInput]
  AND: [PostWhereInput]
}

input FileWhereInput {
  equalTo: File
  notEqualTo: File
  in: [File]
  notInt: [File]
}

input PostACLObjectWhereInput {
  users: [PostACLObjectUsersACLWhereInput]
  roles: [PostACLObjectRolesACLWhereInput]
  OR: [PostACLObjectWhereInput]
  AND: [PostACLObjectWhereInput]
}

input PostACLObjectUsersACLWhereInput {
  userId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [PostACLObjectUsersACLWhereInput]
  AND: [PostACLObjectUsersACLWhereInput]
}

input PostACLObjectRolesACLWhereInput {
  roleId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [PostACLObjectRolesACLWhereInput]
  AND: [PostACLObjectRolesACLWhereInput]
}

enum PostOrder {
  name_ASC
  name_DESC
  test_ASC
  test_DESC
  acl_ASC
  acl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  search_ASC
  search_DESC
}

enum _SessionOrder {
  user_ASC
  user_DESC
  accessToken_ASC
  accessToken_DESC
  accessTokenExpiresAt_ASC
  accessTokenExpiresAt_DESC
  refreshToken_ASC
  refreshToken_DESC
  refreshTokenExpiresAt_ASC
  refreshTokenExpiresAt_DESC
  acl_ASC
  acl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  search_ASC
  search_DESC
}

type RoleConnection {
  totalCount: Int
  edges: [RoleEdge]
}

type RoleEdge {
  node: Role!
}

enum RoleOrder {
  name_ASC
  name_DESC
  users_ASC
  users_DESC
  acl_ASC
  acl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  search_ASC
  search_DESC
}

type PaymentConnection {
  totalCount: Int
  edges: [PaymentEdge]
}

type PaymentEdge {
  node: Payment!
}

input PaymentWhereInput {
  id: IdWhereInput
  user: UserWhereInput
  amount: IntWhereInput
  currency: AnyWhereInput
  acl: PaymentACLObjectWhereInput
  createdAt: DateWhereInput
  updatedAt: DateWhereInput
  search: SearchWhereInput
  OR: [PaymentWhereInput]
  AND: [PaymentWhereInput]
}

input PaymentACLObjectWhereInput {
  users: [PaymentACLObjectUsersACLWhereInput]
  roles: [PaymentACLObjectRolesACLWhereInput]
  OR: [PaymentACLObjectWhereInput]
  AND: [PaymentACLObjectWhereInput]
}

input PaymentACLObjectUsersACLWhereInput {
  userId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [PaymentACLObjectUsersACLWhereInput]
  AND: [PaymentACLObjectUsersACLWhereInput]
}

input PaymentACLObjectRolesACLWhereInput {
  roleId: StringWhereInput
  read: BooleanWhereInput
  write: BooleanWhereInput
  OR: [PaymentACLObjectRolesACLWhereInput]
  AND: [PaymentACLObjectRolesACLWhereInput]
}

enum PaymentOrder {
  user_ASC
  user_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  acl_ASC
  acl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  search_ASC
  search_DESC
}

type MeOutput {
  user: User
}

type Invoice {
  amountDue: Int!
  amountPaid: Int!
  currency: Currency!
  id: String!
  created: Int!
  invoiceUrl: String!
  isPaid: Boolean!
}

type Mutation {
  """User class"""
  createUser(input: CreateUserInput!): CreateUserPayload

  """User class"""
  createUsers(input: CreateUsersInput!): UserConnection!

  """User class"""
  updateUser(input: UpdateUserInput!): UpdateUserPayload

  """User class"""
  updateUsers(input: UpdateUsersInput!): UserConnection!

  """User class"""
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  """User class"""
  deleteUsers(input: DeleteUsersInput!): UserConnection!
  createPost(input: CreatePostInput!): CreatePostPayload
  createPosts(input: CreatePostsInput!): PostConnection!
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updatePosts(input: UpdatePostsInput!): PostConnection!
  deletePost(input: DeletePostInput!): DeletePostPayload
  deletePosts(input: DeletePostsInput!): PostConnection!
  create_Session(input: Create_SessionInput!): Create_SessionPayload
  create_Sessions(input: Create_SessionsInput!): _SessionConnection!
  update_Session(input: Update_SessionInput!): Update_SessionPayload
  update_Sessions(input: Update_SessionsInput!): _SessionConnection!
  delete_Session(input: Delete_SessionInput!): Delete_SessionPayload
  delete_Sessions(input: Delete_SessionsInput!): _SessionConnection!
  createRole(input: CreateRoleInput!): CreateRolePayload
  createRoles(input: CreateRolesInput!): RoleConnection!
  updateRole(input: UpdateRoleInput!): UpdateRolePayload
  updateRoles(input: UpdateRolesInput!): RoleConnection!
  deleteRole(input: DeleteRoleInput!): DeleteRolePayload
  deleteRoles(input: DeleteRolesInput!): RoleConnection!
  createPayment(input: CreatePaymentInput!): CreatePaymentPayload
  createPayments(input: CreatePaymentsInput!): PaymentConnection!
  updatePayment(input: UpdatePaymentInput!): UpdatePaymentPayload
  updatePayments(input: UpdatePaymentsInput!): PaymentConnection!
  deletePayment(input: DeletePaymentInput!): DeletePaymentPayload
  deletePayments(input: DeletePaymentsInput!): PaymentConnection!
  createMutation(input: CreateMutationInput!): Boolean!
  customMutation(input: CustomMutationInput!): Int
  secondCustomMutation(input: SecondCustomMutationInput!): Int

  """
  Create a payment with the payment provider. Returns the url to redirect the user to pay
  """
  makePayment(input: MakePaymentInput!): String
  cancelSubscription(input: CancelSubscriptionInput!): Boolean

  """Send basic email with text and html, returns the id of the email"""
  sendEmail(input: SendEmailInput!): String
  signInWith(input: SignInWithInput!): SignInWithOutput
  signUpWith(input: SignUpWithInput!): SignUpWithOutput
  signOut: Boolean
  refresh(input: RefreshInput!): RefreshSessionOutput
  verifyChallenge(input: VerifyChallengeInput!): Boolean
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

input CreateUserInput {
  fields: UserCreateFieldsInput
}

input CreateUsersInput {
  fields: [UserCreateFieldsInput]!
  offset: Int
  first: Int
  order: [UserOrder]
}

type UpdateUserPayload {
  user: User
  clientMutationId: String
}

input UpdateUserInput {
  id: ID
  fields: UserUpdateFieldsInput
}

"""User class"""
input UserUpdateFieldsInput {
  name: String
  age: Int
  acl: UserACLObjectUpdateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
  authentication: UserAuthenticationUpdateFieldsInput
  provider: AuthenticationProvider
  isOauth: Boolean
  email: Email
  verifiedEmail: Boolean
  role: RolePointerInput
  sessions: _SessionRelationInput
}

input UserACLObjectUpdateFieldsInput {
  users: [UserACLObjectUsersACLUpdateFieldsInput]
  roles: [UserACLObjectRolesACLUpdateFieldsInput]
}

input UserACLObjectUsersACLUpdateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input UserACLObjectRolesACLUpdateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input UserAuthenticationUpdateFieldsInput {
  emailPassword: UserAuthenticationEmailPasswordUpdateFieldsInput
  google: UserAuthenticationGoogleUpdateFieldsInput
}

input UserAuthenticationEmailPasswordUpdateFieldsInput {
  email: Email
  password: String
}

input UserAuthenticationGoogleUpdateFieldsInput {
  email: Email
  verifiedEmail: Boolean
  idToken: String
}

input UpdateUsersInput {
  fields: UserUpdateFieldsInput
  where: UserWhereInput
  offset: Int
  first: Int
  order: [UserOrder]
}

type DeleteUserPayload {
  user: User
  clientMutationId: String
}

input DeleteUserInput {
  id: ID
}

input DeleteUsersInput {
  where: UserWhereInput
  order: [UserOrder]
}

type CreatePostPayload {
  post: Post
  clientMutationId: String
}

input CreatePostInput {
  fields: PostCreateFieldsInput
}

input CreatePostsInput {
  fields: [PostCreateFieldsInput]!
  offset: Int
  first: Int
  order: [PostOrder]
}

type UpdatePostPayload {
  post: Post
  clientMutationId: String
}

input UpdatePostInput {
  id: ID
  fields: PostUpdateFieldsInput
}

input PostUpdateFieldsInput {
  name: String
  test: File
  acl: PostACLObjectUpdateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PostACLObjectUpdateFieldsInput {
  users: [PostACLObjectUsersACLUpdateFieldsInput]
  roles: [PostACLObjectRolesACLUpdateFieldsInput]
}

input PostACLObjectUsersACLUpdateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input PostACLObjectRolesACLUpdateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input UpdatePostsInput {
  fields: PostUpdateFieldsInput
  where: PostWhereInput
  offset: Int
  first: Int
  order: [PostOrder]
}

type DeletePostPayload {
  post: Post
  clientMutationId: String
}

input DeletePostInput {
  id: ID
}

input DeletePostsInput {
  where: PostWhereInput
  order: [PostOrder]
}

type Create_SessionPayload {
  _session: _Session
  clientMutationId: String
}

input Create_SessionInput {
  fields: _SessionCreateFieldsInput
}

input Create_SessionsInput {
  fields: [_SessionCreateFieldsInput]!
  offset: Int
  first: Int
  order: [_SessionOrder]
}

type Update_SessionPayload {
  _session: _Session
  clientMutationId: String
}

input Update_SessionInput {
  id: ID
  fields: _SessionUpdateFieldsInput
}

input _SessionUpdateFieldsInput {
  user: UserPointerInput
  accessToken: String
  accessTokenExpiresAt: Date
  refreshToken: String
  refreshTokenExpiresAt: Date
  acl: _SessionACLObjectUpdateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input _SessionACLObjectUpdateFieldsInput {
  users: [_SessionACLObjectUsersACLUpdateFieldsInput]
  roles: [_SessionACLObjectRolesACLUpdateFieldsInput]
}

input _SessionACLObjectUsersACLUpdateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input _SessionACLObjectRolesACLUpdateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input Update_SessionsInput {
  fields: _SessionUpdateFieldsInput
  where: _SessionWhereInput
  offset: Int
  first: Int
  order: [_SessionOrder]
}

type Delete_SessionPayload {
  _session: _Session
  clientMutationId: String
}

input Delete_SessionInput {
  id: ID
}

input Delete_SessionsInput {
  where: _SessionWhereInput
  order: [_SessionOrder]
}

type CreateRolePayload {
  role: Role
  clientMutationId: String
}

input CreateRoleInput {
  fields: RoleCreateFieldsInput
}

input CreateRolesInput {
  fields: [RoleCreateFieldsInput]!
  offset: Int
  first: Int
  order: [RoleOrder]
}

type UpdateRolePayload {
  role: Role
  clientMutationId: String
}

input UpdateRoleInput {
  id: ID
  fields: RoleUpdateFieldsInput
}

input RoleUpdateFieldsInput {
  name: String
  users: UserRelationInput
  acl: RoleACLObjectUpdateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input RoleACLObjectUpdateFieldsInput {
  users: [RoleACLObjectUsersACLUpdateFieldsInput]
  roles: [RoleACLObjectRolesACLUpdateFieldsInput]
}

input RoleACLObjectUsersACLUpdateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input RoleACLObjectRolesACLUpdateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input UpdateRolesInput {
  fields: RoleUpdateFieldsInput
  where: RoleWhereInput
  offset: Int
  first: Int
  order: [RoleOrder]
}

type DeleteRolePayload {
  role: Role
  clientMutationId: String
}

input DeleteRoleInput {
  id: ID
}

input DeleteRolesInput {
  where: RoleWhereInput
  order: [RoleOrder]
}

type CreatePaymentPayload {
  payment: Payment
  clientMutationId: String
}

input CreatePaymentInput {
  fields: PaymentCreateFieldsInput
}

input CreatePaymentsInput {
  fields: [PaymentCreateFieldsInput]!
  offset: Int
  first: Int
  order: [PaymentOrder]
}

type UpdatePaymentPayload {
  payment: Payment
  clientMutationId: String
}

input UpdatePaymentInput {
  id: ID
  fields: PaymentUpdateFieldsInput
}

input PaymentUpdateFieldsInput {
  user: UserPointerInput
  amount: Int
  currency: Currency
  acl: PaymentACLObjectUpdateFieldsInput
  createdAt: Date
  updatedAt: Date
  search: [String]
}

input PaymentACLObjectUpdateFieldsInput {
  users: [PaymentACLObjectUsersACLUpdateFieldsInput]
  roles: [PaymentACLObjectRolesACLUpdateFieldsInput]
}

input PaymentACLObjectUsersACLUpdateFieldsInput {
  userId: String
  read: Boolean
  write: Boolean
}

input PaymentACLObjectRolesACLUpdateFieldsInput {
  roleId: String
  read: Boolean
  write: Boolean
}

input UpdatePaymentsInput {
  fields: PaymentUpdateFieldsInput
  where: PaymentWhereInput
  offset: Int
  first: Int
  order: [PaymentOrder]
}

type DeletePaymentPayload {
  payment: Payment
  clientMutationId: String
}

input DeletePaymentInput {
  id: ID
}

input DeletePaymentsInput {
  where: PaymentWhereInput
  order: [PaymentOrder]
}

input CreateMutationInput {
  name: Int!
}

input CustomMutationInput {
  a: Int!
  b: Int!
}

input SecondCustomMutationInput {
  sum: SecondCustomMutationSumInput
}

input SecondCustomMutationSumInput {
  a: Int!
  b: Int!
}

input MakePaymentInput {
  customerEmail: Email
  paymentMode: PaymentMode!
  successUrl: String!
  cancelUrl: String!
  products: [MakePaymentProductInput]!
  automaticTax: Boolean
  recurringInterval: PaymentReccuringInterval
}

input MakePaymentProductInput {
  name: String!
  unitAmount: Int!
  quantity: Int!
}

input CancelSubscriptionInput {
  email: Email!
}

input SendEmailInput {
  from: String!
  to: [String!]!
  subject: String!
  text: String
  html: String
}

type SignInWithOutput {
  id: String
  accessToken: String
  refreshToken: String
}

input SignInWithInput {
  authentication: SignInWithAuthenticationInput
}

input SignInWithAuthenticationInput {
  emailPassword: SignInWithAuthenticationEmailPasswordInput
  google: SignInWithAuthenticationGoogleInput
  otp: SignInWithAuthenticationOtpInput
  secondaryFactor: SecondaryFactor
}

input SignInWithAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
}

input SignInWithAuthenticationGoogleInput {
  authorizationCode: String!
  codeVerifier: String!
}

input SignInWithAuthenticationOtpInput {
  code: String
}

type SignUpWithOutput {
  id: String
  accessToken: String!
  refreshToken: String!
}

input SignUpWithInput {
  authentication: SignUpWithAuthenticationInput
}

input SignUpWithAuthenticationInput {
  emailPassword: SignUpWithAuthenticationEmailPasswordInput
  google: SignUpWithAuthenticationGoogleInput
  otp: SignUpWithAuthenticationOtpInput
  secondaryFactor: SecondaryFactor
}

input SignUpWithAuthenticationEmailPasswordInput {
  email: Email!
  password: String!
}

input SignUpWithAuthenticationGoogleInput {
  authorizationCode: String!
  codeVerifier: String!
}

input SignUpWithAuthenticationOtpInput {
  code: String
}

type RefreshSessionOutput {
  accessToken: String!
  refreshToken: String!
}

input RefreshInput {
  accessToken: String!
  refreshToken: String!
}

input VerifyChallengeInput {
  factor: VerifyChallengeFactorInput
}

input VerifyChallengeFactorInput {
  otp: VerifyChallengeFactorOtpInput
}

input VerifyChallengeFactorOtpInput {
  code: String
}